
options {
  STATIC = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  TRACK_TOKENS = true;
}

PARSER_BEGIN(JstlParser)

package com.schibsted.spt.data.jstl2;

public class JstlParser {

}

PARSER_END(JstlParser)

/* WHITE SPACE */
SPECIAL_TOKEN :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

TOKEN :
{
  < NULL: "null" > |
  < INTEGER: ("-")? (["0"-"9"])+ > |
  < DECIMAL: ("-")? (["0"-"9"])+ "." (["0"-"9"])+ > |
  < STRING: "\"" (~["\""])* "\"" > |
  < LBRACKET: "[" > |
  < RBRACKET: "]" > |
  < COMMA: "," > |
  < COLON: ":" > |
  < LCURLY: "{" > |
  < RCURLY: "}" > |
  < TRUE: "true" > |
  < FALSE: "false" > |
  < DOT: "." > |
  < IF: "if" > |
  < ELSE: "else" > |
  < LPAREN: "(" > |
  < RPAREN: ")" > |
  < LET: "let" > |
  < ASSIGN: "=" > |
  < EQUALS: "==" > |
  < PLUS: "+" > |
  < IDENT: (["A"-"Z"] | ["a"-"z"] | ["0"-"9"] | "_" | "-")+ > |
  < VARIABLE: "$" (["A"-"Z"] | ["a"-"z"] | ["0"-"9"] | "_" | "-")+ >
}

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}


/** Root production. */
void Start() :
{}
{
  (Let())*
  Expr() <EOF>
}

void Expr() :
{}
{
  AdditiveExpr() (Comparator() AdditiveExpr())?
}

// not necessary, but makes the tree easier to traverse
void Comparator() :
{}
{
  <EQUALS>
}

void AdditiveExpr() :
{}
{
  BaseExpr() (AdditiveOperator() BaseExpr())?
}

// not necessary, but makes the tree easier to traverse
void AdditiveOperator() :
{}
{
  <PLUS>
}

void BaseExpr() :
{}
{
  (<NULL> | <INTEGER> | <DECIMAL> | <STRING> | <TRUE> | <FALSE> |
  Chainable() |
  IfStatement() |
  Array() | Object())
}

void Chainable() :
{}
{
  (FunctionCall() | <VARIABLE> | <DOT> (<IDENT> | <STRING>)?)
  (DotKey())*
}

void Array() :
{}
{
  <LBRACKET> (Expr() (<COMMA> Expr())*)? <RBRACKET>
}

void Object() :
{}
{
  <LCURLY>
    (Let())*
    (Pair() (<COMMA> Pair())*)?
  <RCURLY>
}

void Pair() :
{}
{
  <STRING> <COLON> Expr()
}

void DotKey() :
{}
{
  <DOT> (<IDENT> | <STRING>)
}

void IfStatement() :
{}
{
  <IF> <LPAREN> Expr() <RPAREN>
    (Let())*
    Expr()
    (ElseBranch())?
}

// not necessary, but makes it easier to walk the parse tree
void ElseBranch() :
{}
{
  <ELSE>
    (Let())*
    Expr()
}

void FunctionCall() :
{}
{
  <IDENT> <LPAREN> (Expr() (<COMMA> Expr())*)? <RPAREN>
}

void Let() :
{}
{
  <LET> <IDENT> <ASSIGN> Expr()
}
